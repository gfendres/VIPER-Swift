//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `humidity`.
    static let humidity = Rswift.ImageResource(bundle: R.hostingBundle, name: "humidity")
    /// Image `pressure`.
    static let pressure = Rswift.ImageResource(bundle: R.hostingBundle, name: "pressure")
    /// Image `wind`.
    static let wind = Rswift.ImageResource(bundle: R.hostingBundle, name: "wind")
    
    /// `UIImage(named: "humidity", bundle: ..., traitCollection: ...)`
    static func humidity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.humidity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pressure", bundle: ..., traitCollection: ...)`
    static func pressure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pressure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wind", bundle: ..., traitCollection: ...)`
    static func wind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wind, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `CityCell`.
    static let cityCell = _R.nib._CityCell()
    /// Nib `ForecastCell`.
    static let forecastCell = _R.nib._ForecastCell()
    
    /// `UINib(name: "CityCell", in: bundle)`
    static func cityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cityCell)
    }
    
    /// `UINib(name: "ForecastCell", in: bundle)`
    static func forecastCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forecastCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Weather`.
    static let weather = _R.storyboard.weather()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Weather", bundle: ...)`
    static func weather(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.weather)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ForecastCell.validate()
    }
    
    struct _CityCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CityCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CityCell
      }
      
      fileprivate init() {}
    }
    
    struct _ForecastCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ForecastCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ForecastCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForecastCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "humidity") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'humidity' is used in nib 'ForecastCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wind") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wind' is used in nib 'ForecastCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pressure") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pressure' is used in nib 'ForecastCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try weather.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct weather: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let forecastViewController = StoryboardViewControllerResource<ForecastViewController>(identifier: "ForecastViewController")
      let name = "Weather"
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")
      
      func forecastViewController(_: Void = ()) -> ForecastViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forecastViewController)
      }
      
      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.weather().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Weather' as 'SearchViewController'.") }
        if _R.storyboard.weather().forecastViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forecastViewController' could not be loaded from storyboard 'Weather' as 'ForecastViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}